#!/usr/bin/env python

from __future__ import division
from __future__ import print_function
import argparse
import textwrap
import os
import glob
import pandas as pd
from collections import OrderedDict
from framed import load_cbmodel, Community, Environment, set_default_solver
from framed.experimental.medium import load_media_db
from smetana import mip_score, mro_score, species_coupling_score, metabolite_production_score, metabolite_uptake_score, minimal_environment


def extract_id_from_filepath(filepath):
    filename = os.path.basename(filepath)

    if filename.endswith('.xml'):
        organism_id = filename[:-4]
    elif filename.endswith('.xml.gz'):
        organism_id = filename[:-7]
    else:
        raise IOError('Unrecognized extension in file {}. Valid extensions are .xml and .xml.gz'.format(filename))

    return organism_id


def load_models(models, flavor, pre_filter=None):
    model_dict = OrderedDict()

    for filepath in models:
        organism_id = extract_id_from_filepath(filepath)

        if pre_filter is not None and organism_id not in pre_filter:
            continue  # do not load models that will not be used

        model = load_cbmodel(filepath, flavor=flavor)
        model_dict[organism_id] = model
        model.id = organism_id

        if 'R_ATPM' in model.reactions:
            model.reactions.R_ATPM.lb = 0

    return model_dict


def load_communities(filepath):
    df = pd.read_csv(filepath, sep='\t', header=None)
    comm_dict = OrderedDict((name, group[1].tolist()) for name, group in df.groupby(0))
    return comm_dict


def main(models, communities=None, mode=None, output=None, flavor=None, media=None, mediadb=None, zeros=False,
         ext_comp_id=None, verbose=False, min_mol_weight=False, use_lp=False, exclude=None, debug=False):

    # load models

    if len(models) == 1 and '*' in models[0]:
        pattern = models[0]
        models = glob.glob(pattern)
        if len(models) == 0:
            print("No files found: {}".format(pattern))
            return

    if not flavor:
        flavor = 'fbc2'

    # load models and communities

    if communities is not None:
        comm_dict = load_communities(communities)
        pre_filter = {org_id for organisms in list(comm_dict.values()) for org_id in organisms}

        if verbose:
            print("Loading models...".format(len(pre_filter)))

        model_dict = load_models(models, flavor, pre_filter)
    else:
        if verbose:
            print("Loading models...".format(len(models)))

        model_dict = load_models(models, flavor)
        comm_dict = {'all': list(model_dict.keys())}

    # load media

    if media:
        if media != "minimal":
            if mediadb is None:
                raise IOError('Please provide media library with --mediadb option.')
            else:
                media_db = load_media_db(mediadb)
        media = media.split(',')
    else:
        media = [None]

    if exclude:
        df = pd.read_csv(exclude, header=None)
        excluded_mets = set(df[0])
        exclude_bigg = {'M_{}_e'.format(x) for x in excluded_mets}
    else:
        excluded_mets = set()
        exclude_bigg = set()

    # compute scores

    global_data = []
    smt_data = []
    debug_data = []

    for comm_id, organisms in list(comm_dict.items()):

        comm_models = [model_dict[organism_id] for organism_id in organisms]
        community = Community(comm_id, comm_models, copy_models=False, extracellular_compartment_id=ext_comp_id)

        for medium in media:

            if medium == "minimal" and (mediadb is None or medium not in mediadb):
                env = minimal_environment(community, verbose=verbose, min_mol_weight=min_mol_weight, use_lp=use_lp)
                if not env:
                    return
                medium_id = "minimal"
            elif medium:
                env = Environment.from_compounds(media_db[medium], exchange_format="'R_EX_M_{}_e_pool'")
                medium_id = medium
            else:
                env = Environment.complete(community.merged)
                medium_id = 'complete'

            if mode == "global":

                if verbose:
                    print('Running MIP for community {} on medium {}...'.format(comm_id, medium_id))

                mip, extras = mip_score(community, environment=env, verbose=verbose,
                                        min_mol_weight=min_mol_weight, use_lp=use_lp, exclude=excluded_mets)

                if mip is None:
                    mip = 'n/a'

                if debug and extras is not None:
                    mip_ni = ','.join(sorted(extras['noninteracting_medium']))
                    mip_i = ','.join(sorted(extras['interacting_medium']))
                    debug_data.append((comm_id, medium_id, 'mip', 'ni', mip_ni))
                    debug_data.append((comm_id, medium_id, 'mip', 'i', mip_i))

                if verbose:
                    print('Running MRO for community {} on medium {}...'.format(comm_id, medium_id))

                mro, extras = mro_score(community, environment=env, verbose=verbose,
                                        min_mol_weight=min_mol_weight, use_lp=use_lp, exclude=excluded_mets)

                if mro is None:
                    mro = 'n/a'

                if debug and extras is not None:
                    comm_medium = ','.join(sorted(extras['community_medium']))
                    debug_data.append((comm_id, medium_id, 'mro', 'community', comm_medium))
                    for org, values in extras['individual_media'].items():
                        org_medium = ','.join(sorted(values))
                        debug_data.append((comm_id, medium_id, 'mro', org, org_medium))

                global_data.append((comm_id, medium_id, len(organisms), mip, mro))

            if mode == "detailed":

                if verbose:
                    print('Running SCS for community {} on medium {}...'.format(comm_id, medium_id))

                scs = species_coupling_score(community, environment=env, verbose=verbose)

                if verbose:
                    print('Running MUS for community {} on medium {}...'.format(comm_id, medium_id))

                mus = metabolite_uptake_score(community, environment=env, verbose=verbose,
                                              min_mol_weight=min_mol_weight)
                if verbose:
                    print('Running MPS for community {} on medium {}...'.format(comm_id, medium_id))

                mps = metabolite_production_score(community, environment=env)

                pairs = [(org1, org2) for org1 in organisms for org2 in organisms if org1 != org2]

                for org1, org2 in pairs:
                    if scs[org1] is None:
                        continue
                    if mus[org1] is None:
                        continue
                    if mps[org2] is None:
                        continue

                    metabolites = (set(mus[org1]) | set(mus[org2])) - exclude_bigg

                    for met in sorted(metabolites):
                        scs_o1_o2 = scs[org1][org2]
                        mus_o1_met = mus[org1].get(met, 0)
                        mps_o2_met = mps[org2].get(met, 0)
                        smt = scs_o1_o2 * mus_o1_met * mps_o2_met
                        smt_data.append((comm_id, medium_id, org1, org2, met, scs_o1_o2, mus_o1_met, mps_o2_met, smt))

    # export results

    prefix = output + '_' if output else ''

    if mode == "global":

        global_df = pd.DataFrame(global_data, columns=['community', 'medium', 'size', "mip", "mro"])
        global_df.to_csv(prefix + 'global.tsv', sep='\t', index=False)

        if debug:
            debug_df = pd.DataFrame(debug_data, columns=['community', 'medium', 'key1', "key2", "data"])
            debug_df.to_csv(prefix + 'debug.tsv', sep='\t', index=False)

    if mode == "detailed":

        columns = ['community', 'medium', 'receiver', 'donor', 'compound', 'scs', 'mus', 'mps', 'smetana']
        smt_df = pd.DataFrame(smt_data, columns=columns)

        if not zeros:
            smt_df = smt_df.query('smetana > 0')

        smt_df.to_csv(prefix + 'detailed.tsv', sep='\t', index=False)

    if verbose:
        print('Done.')


if __name__ == '__main__':

    parser = argparse.ArgumentParser(description="Calculate SMETANA scores for one or multiple microbial communities.",
                                     formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument('models', metavar='MODELS', nargs='+',
                        help=textwrap.dedent(
        """
        Multiple single-species models (one or more files).
        
        You can use wild-cards, for example: models/*.xml, and optionally protect with quotes to avoid automatic bash
        expansion (this will be faster for long lists): "models/*.xml". 
        """
        ))

    parser.add_argument('-c', '--communities', metavar='COMMUNITIES.TSV', dest='communities',
                        help=textwrap.dedent(
        """
        Run SMETANA for multiple (sub)communities.
        The communities must be specified in a two-column tab-separated file with community and organism identifiers.
        The organism identifiers should match the file names in the SBML files (without extension).
        
        Example:
            community1\torganism1
            community1\torganism2
            community2\torganism1
            community2\torganism3
            
        """
    ))

    parser.add_argument('-o', '--output', dest='output', help="Prefix for output file(s).")
    parser.add_argument('--flavor', help="Expected SBML flavor of the input files (cobra or fbc2).")
    parser.add_argument('-m', '--media', dest='media', help="Run SMETANA for given media (comma-separated).")
    parser.add_argument('--mediadb', help="Media database file")

    mode = parser.add_mutually_exclusive_group()
    mode.add_argument('-g', '--global', dest='mip_mro', action='store_true', help="Run global analysis with MIP/MRO (faster)")
    mode.add_argument('-d', '--detailed',  dest='smetana', action='store_true', help="Run detailed SMETANA analysis (slower)")

    parser.add_argument('-v', '--verbose', action='store_true', dest='verbose', help="Switch to verbose mode")
    parser.add_argument('-z', '--zeros', action='store_true', dest='zeros', help="Include entries with zero score.")
    parser.add_argument('--solver', help="Change default solver (current options: 'gurobi', 'cplex').")
    parser.add_argument('--ext', help="Extracellular compartment identifier in the models (default 'C_e').")
    parser.add_argument('--molweight', action='store_true', help="Use molecular weight minimization (recomended).")
    parser.add_argument('--lp', action='store_true', help=argparse.SUPPRESS)
    parser.add_argument('--exclude', help="List of compounds to exclude from calculations (e.g.: inorganic compounds).")
    parser.add_argument('--debug', action='store_true', help=argparse.SUPPRESS)

    args = parser.parse_args()

    if args.smetana:
        mode = "detailed"
    else:
        mode = "global"

    if args.solver:
        set_default_solver(args.solver)

    ext_comp_id = args.ext if args.ext else 'C_e'

    main(
        models=args.models,
        communities=args.communities,
        mode=mode,
        output=args.output,
        flavor=args.flavor,
        media=args.media,
        mediadb=args.mediadb,
        zeros=args.zeros,
        ext_comp_id=ext_comp_id,
        verbose=args.verbose,
        min_mol_weight=args.molweight,
        use_lp=args.lp,
        exclude=args.exclude,
        debug=args.debug,
    )


